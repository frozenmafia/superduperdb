"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[7577],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(n),m=o,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(h,s(s({ref:t},p),{},{components:n})):r.createElement(h,s({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},49685:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=n(87462),o=(n(67294),n(3905));const a={},s="Vector-search with SuperDuperDB",i={unversionedId:"use_cases/items/vector_search",id:"use_cases/items/vector_search",title:"Vector-search with SuperDuperDB",description:"Introduction",source:"@site/content/use_cases/items/vector_search.md",sourceDirName:"use_cases/items",slug:"/use_cases/items/vector_search",permalink:"/docs/use_cases/items/vector_search",draft:!1,editUrl:"https://github.com/SuperDuperDB/superduperdb/tree/main/docs/content/use_cases/items/vector_search.md",tags:[],version:"current",frontMatter:{},sidebar:"useCasesSidebar",previous:{title:"Transfer Learning with Sentence Transformers and Scikit-Learn",permalink:"/docs/use_cases/items/transfer_learning"},next:{title:"Search within videos with text",permalink:"/docs/use_cases/items/video_search"}},c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Connect to datastore",id:"connect-to-datastore",level:2},{value:"Load Dataset",id:"load-dataset",level:2},{value:"Create Vectors",id:"create-vectors",level:2},{value:"Index Vectors",id:"index-vectors",level:2},{value:"Perform Vector Search",id:"perform-vector-search",level:2}],p={toc:l},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"vector-search-with-superduperdb"},"Vector-search with SuperDuperDB"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"This notebook provides a detailed guide on performing vector search using SuperDuperDB. Vector search is a powerful technique for searching and retrieving documents based on their similarity to a query vector. In this guide, we will demonstrate how to set up SuperDuperDB for vector search and use it to search a dataset of documents."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"Before diving into the implementation, ensure that you have the necessary libraries installed by running the following commands:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"!pip install superduperdb\n!pip install ipython\n")),(0,o.kt)("p",null,"Additionally, ensure that you have set your openai API key as an environment variable. You can uncomment the following code and add your API key:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import os\n\n#os.environ['OPENAI_API_KEY'] = 'sk-...'\n\nif 'OPENAI_API_KEY' not in os.environ:\n    raise Exception('You need to set an OpenAI key as environment variable: \"export OPEN_API_KEY=sk-...\"')\n")),(0,o.kt)("h2",{id:"connect-to-datastore"},"Connect to datastore"),(0,o.kt)("p",null,"First, we need to establish a connection to a MongoDB datastore via SuperDuperDB. You can configure the ",(0,o.kt)("inlineCode",{parentName:"p"},"MongoDB_URI")," based on your specific setup.\nHere are some examples of MongoDB URIs:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"For testing (default connection): ",(0,o.kt)("inlineCode",{parentName:"li"},"mongomock://test")),(0,o.kt)("li",{parentName:"ul"},"Local MongoDB instance: ",(0,o.kt)("inlineCode",{parentName:"li"},"mongodb://localhost:27017")),(0,o.kt)("li",{parentName:"ul"},"MongoDB with authentication: ",(0,o.kt)("inlineCode",{parentName:"li"},"mongodb://superduper:superduper@mongodb:27017/documents")),(0,o.kt)("li",{parentName:"ul"},"MongoDB Atlas: ",(0,o.kt)("inlineCode",{parentName:"li"},"mongodb+srv://<username>:<password>@<atlas_cluster>/<database>"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb import superduper\nfrom superduperdb.backends.mongodb import Collection\nimport os\n\nmongodb_uri = os.getenv(\"MONGODB_URI\",\"mongomock://test\")\ndb = superduper(mongodb_uri, artifact_store='filesystem://./data/')\n\ndoc_collection = Collection('documents')\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"db.metadata\n")),(0,o.kt)("h2",{id:"load-dataset"},"Load Dataset"),(0,o.kt)("p",null,"We have prepared a dataset, which is the inline documentation of the pymongo API. Let's load this dataset:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"!curl -O https://superduperdb-public.s3.eu-west-1.amazonaws.com/pymongo.json\n\nimport json\n\nwith open('pymongo.json') as f:\n    data = json.load(f)\n")),(0,o.kt)("p",null,"As usual, we insert the data:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb import Document\n\ndb.execute(doc_collection.insert_many([Document(r) for r in data]))\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"db.execute(Collection('documents').find_one())\n")),(0,o.kt)("h2",{id:"create-vectors"},"Create Vectors"),(0,o.kt)("p",null,"In the remainder of the notebook, you can choose between using the ",(0,o.kt)("inlineCode",{parentName:"p"},"openai")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"sentence_transformers")," libraries to perform vector search. After instantiating the model wrappers, the rest of the notebook remains identical."),(0,o.kt)("p",null,"For OpenAI vectors:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.ext.openai.model import OpenAIEmbedding\n\nmodel = OpenAIEmbedding(model='text-embedding-ada-002')\n")),(0,o.kt)("p",null,"For Sentence-Transformers vectors, uncomment the following section:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"#import sentence_transformers\n#from superduperdb import Model, vector\n\n#model = Model(\n#    identifier='all-MiniLM-L6-v2', \n#    object=sentence_transformers.SentenceTransformer('all-MiniLM-L6-v2'),\n#    encoder=vector(shape=(384,)),\n#    predict_method='encode', # Specify the prediction method\n#    postprocess=lambda x: x.tolist(),  # Define postprocessing function\n#    batch_predict=True, # Generate predictions for a set of observations all at once \n#)\n")),(0,o.kt)("h2",{id:"index-vectors"},"Index Vectors"),(0,o.kt)("p",null,"Now we can configure the Atlas vector-search index. This command saves and sets up a model to ",(0,o.kt)("inlineCode",{parentName:"p"},"listen")," to a particular subfield (or the whole document) for new text, converts it on the fly to vectors, and then indexes these vectors using Atlas vector-search."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb import Listener, VectorIndex\n\ndb.add(\n    VectorIndex(\n        identifier=f'pymongo-docs-{model.identifier}',\n        indexing_listener=Listener(\n            select=doc_collection.find(),\n            key='value',\n            model=model,\n            predict_kwargs={'max_chunk_size': 1000},\n        ),\n    )\n)\n\ndb.show('vector_index')\n")),(0,o.kt)("h2",{id:"perform-vector-search"},"Perform Vector Search"),(0,o.kt)("p",null,"Now that the index is set up, we can use it in a query. SuperDuperDB provides some syntactic sugar for the ",(0,o.kt)("inlineCode",{parentName:"p"},"aggregate")," search pipelines, which can be helpful. It also handles all the conversion of inputs to vectors under the hood."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb import Document\nfrom IPython.display import *\n\n# Define the search parameters\nsearch_term = 'Query the database'\nnum_results = 5\n\n# Execute the query\nresult = db.execute(doc_collection\n        .like(Document({'value': search_term}), vector_index=f'pymongo-docs-{model.identifier}', n=num_results)\n        .find()\n)\n\n# Display a horizontal line\ndisplay(Markdown('---'))\n\n# Iterate through the query results and display them\nfor r in result:\n    display(Markdown(f'### `{r[\"parent\"] + \".\" if r[\"parent\"] else \"\"}{r[\"res\"]}`'))\n    display(Markdown(r['value']))\n    display(Markdown('---'))\n")))}u.isMDXComponent=!0}}]);