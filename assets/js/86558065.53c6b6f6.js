"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[5875],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?o.createElement(h,i(i({ref:t},p),{},{components:n})):o.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},93158:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=n(87462),r=(n(67294),n(3905));const a={},i="Cataloguing voice-memos for a self managed personal assistant",s={unversionedId:"use_cases/items/voice_memos",id:"use_cases/items/voice_memos",title:"Cataloguing voice-memos for a self managed personal assistant",description:"Introduction",source:"@site/content/use_cases/items/voice_memos.md",sourceDirName:"use_cases/items",slug:"/use_cases/items/voice_memos",permalink:"/docs/use_cases/items/voice_memos",draft:!1,editUrl:"https://github.com/SuperDuperDB/superduperdb/tree/main/docs/content/use_cases/items/voice_memos.md",tags:[],version:"current",frontMatter:{},sidebar:"useCasesSidebar",previous:{title:"Search within videos with text",permalink:"/docs/use_cases/items/video_search"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Objectives:",id:"objectives",level:3},{value:"Our approach involves:",id:"our-approach-involves",level:3},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Connect to datastore",id:"connect-to-datastore",level:2},{value:"Load Dataset",id:"load-dataset",level:2},{value:"Install Pre-Trained Model (LibreSpeech) into Database",id:"install-pre-trained-model-librespeech-into-database",level:2},{value:"Ask Questions to Your Voice Assistant",id:"ask-questions-to-your-voice-assistant",level:2},{value:"Enrich it with Chat-Completion",id:"enrich-it-with-chat-completion",level:2},{value:"Full Voice-Assistant Experience",id:"full-voice-assistant-experience",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"cataloguing-voice-memos-for-a-self-managed-personal-assistant"},"Cataloguing voice-memos for a self managed personal assistant"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Discover the magic of SuperDuperDB as we seamlessly integrate models across different data modalities, such as audio and text. Experience the creation of highly sophisticated data-based applications with minimal boilerplate code."),(0,r.kt)("h3",{id:"objectives"},"Objectives:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Maintain a database of audio recordings"),(0,r.kt)("li",{parentName:"ol"},"Index the content of these audio recordings"),(0,r.kt)("li",{parentName:"ol"},"Search and interrogate the content of these audio recordings")),(0,r.kt)("h3",{id:"our-approach-involves"},"Our approach involves:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Utilizing a transformers model by Facebook's AI team to transcribe audio to text."),(0,r.kt)("li",{parentName:"ul"},"Employing an OpenAI vectorization model to index the transcribed text."),(0,r.kt)("li",{parentName:"ul"},"Harnessing OpenAI ChatGPT model in conjunction with relevant recordings to query the audio database.")),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"Before diving into the implementation, ensure that you have the necessary libraries installed by running the following commands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"!pip install superduperdb\n!pip install transformers soundfile torchaudio librosa openai\n!pip install -U datasets\n")),(0,r.kt)("p",null,"Additionally, ensure that you have set your openai API key as an environment variable. You can uncomment the following code and add your API key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import os\n\n#os.environ['OPENAI_API_KEY'] = 'sk-XXXX'\n\nif 'OPENAI_API_KEY' not in os.environ:\n    raise Exception('Environment variable \"OPENAI_API_KEY\" not set')\n")),(0,r.kt)("h2",{id:"connect-to-datastore"},"Connect to datastore"),(0,r.kt)("p",null,"First, we need to establish a connection to a MongoDB datastore via SuperDuperDB. You can configure the ",(0,r.kt)("inlineCode",{parentName:"p"},"MongoDB_URI")," based on your specific setup.\nHere are some examples of MongoDB URIs:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For testing (default connection): ",(0,r.kt)("inlineCode",{parentName:"li"},"mongomock://test")),(0,r.kt)("li",{parentName:"ul"},"Local MongoDB instance: ",(0,r.kt)("inlineCode",{parentName:"li"},"mongodb://localhost:27017")),(0,r.kt)("li",{parentName:"ul"},"MongoDB with authentication: ",(0,r.kt)("inlineCode",{parentName:"li"},"mongodb://superduper:superduper@mongodb:27017/documents")),(0,r.kt)("li",{parentName:"ul"},"MongoDB Atlas: ",(0,r.kt)("inlineCode",{parentName:"li"},"mongodb+srv://<username>:<password>@<atlas_cluster>/<database>"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from superduperdb import superduper\nfrom superduperdb.backends.mongodb import Collection\nimport os\n\nmongodb_uri = os.getenv("MONGODB_URI","mongomock://test")\ndb = superduper(mongodb_uri)\n\n# Create a collection for Voice memos\nvoice_collection = Collection(\'voice-memos\')\n')),(0,r.kt)("h2",{id:"load-dataset"},"Load Dataset"),(0,r.kt)("p",null,"In this example se use ",(0,r.kt)("inlineCode",{parentName:"p"},"LibriSpeech")," as our voice recording dataset. It is a corpus of approximately 1000 hours of read English speech. The same functionality could be accomplised using any audio, in particular audio hosted on the web, or in an ",(0,r.kt)("inlineCode",{parentName:"p"},"s3")," bucket. For instance, if you have a repository of audio of conference calls, or memos, this may be indexed in the same way. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from datasets import load_dataset\nfrom superduperdb.ext.numpy import array\nfrom superduperdb import Document\n\ndata = load_dataset(\"hf-internal-testing/librispeech_asr_demo\", \"clean\", split=\"validation\")\n\n# Using an `Encoder`, we may add the audio data directly to a MongoDB collection:\nenc = array('float64', shape=(None,))\n\ndb.add(enc)\n\ndb.execute(voice_collection.insert_many([\n    Document({'audio': enc(r['audio']['array'])}) for r in data\n]))\n")),(0,r.kt)("h2",{id:"install-pre-trained-model-librespeech-into-database"},"Install Pre-Trained Model (LibreSpeech) into Database"),(0,r.kt)("p",null,"Apply a pretrained ",(0,r.kt)("inlineCode",{parentName:"p"},"transformers")," model to the data: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from transformers import Speech2TextProcessor, Speech2TextForConditionalGeneration\nfrom superduperdb.ext.transformers import Pipeline\n\nmodel = Speech2TextForConditionalGeneration.from_pretrained(\"facebook/s2t-small-librispeech-asr\")\nprocessor = Speech2TextProcessor.from_pretrained(\"facebook/s2t-small-librispeech-asr\")\n\nSAMPLING_RATE = 16000\n\ntranscriber = Pipeline(\n    identifier='transcription',\n    object=model,\n    preprocess=processor,\n    preprocess_kwargs={'sampling_rate': SAMPLING_RATE, 'return_tensors': 'pt', 'padding': True},\n    postprocess=lambda x: processor.batch_decode(x, skip_special_tokens=True),\n    predict_method='generate',\n    preprocess_type='other',\n)\n")),(0,r.kt)("h1",{id:"run-predictions-on-all-recordings-in-the-collection"},"Run Predictions on All Recordings in the Collection"),(0,r.kt)("p",null,"Apply the ",(0,r.kt)("inlineCode",{parentName:"p"},"Pipeline")," to all audio recordings:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"transcriber.predict(X='audio', db=db, select=voice_collection.find(), max_chunk_size=10)\n")),(0,r.kt)("h2",{id:"ask-questions-to-your-voice-assistant"},"Ask Questions to Your Voice Assistant"),(0,r.kt)("p",null,"Ask questions to your voice assistant, targeting specific queries and utilizing the power of MongoDB for vector-search and filtering rules:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb import VectorIndex, Listener\nfrom superduperdb.ext.openai import OpenAIEmbedding\n\ndb.add(\n    VectorIndex(\n        identifier='my-index',\n        indexing_listener=Listener(\n            model=OpenAIEmbedding(model='text-embedding-ada-002'),\n            key='_outputs.audio.transcription',\n            select=voice_collection.find(),\n        ),\n    )\n)\n")),(0,r.kt)("p",null,"Let's confirm this has worked, by searching for the ",(0,r.kt)("inlineCode",{parentName:"p"},"royal cavern"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Define the search parameters\nsearch_term = 'royal cavern'\nnum_results = 2\n\nlist(db.execute(\n    voice_collection.like(\n        {'_outputs.audio.transcription': search_term},\n        n=num_results,\n        vector_index='my-index',\n    ).find({}, {'_outputs.audio.transcription': 1})\n))\n")),(0,r.kt)("h2",{id:"enrich-it-with-chat-completion"},"Enrich it with Chat-Completion"),(0,r.kt)("p",null,"Connect the previous steps with the gpt-3.5.turbo, a chat-completion model on OpenAI. The plan is to seed the completions with the most relevant audio recordings, as judged by their textual transcriptions. These transcriptions are retrieved using the previously configured ",(0,r.kt)("inlineCode",{parentName:"p"},"VectorIndex"),". "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.ext.openai import OpenAIChatCompletion\n\nchat = OpenAIChatCompletion(\n    model='gpt-3.5-turbo',\n    prompt=(\n        'Use the following facts to answer this question\\n'\n        '{context}\\n\\n'\n        'Here\\'s the question:\\n'\n    ),\n)\n\ndb.add(chat)\n\nprint(db.show('model'))\n")),(0,r.kt)("h2",{id:"full-voice-assistant-experience"},"Full Voice-Assistant Experience"),(0,r.kt)("p",null,"Test the full model by asking a question about a specific fact mentioned in the audio recordings. The model will retrieve the most relevant recordings and use them to formulate its answer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb import Document\n\nq = 'Is anything really Greek?'\n\nprint(db.predict(\n    model_name='gpt-3.5-turbo',\n    input=q,\n    context_select=voice_collection.like(\n        Document({'_outputs.audio.transcription': q}), vector_index='my-index'\n    ).find(),\n    context_key='_outputs.audio.transcription',\n)[0].content)\n")))}u.isMDXComponent=!0}}]);