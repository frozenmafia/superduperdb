"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[4119],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>h});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),d=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=d(e.components);return a.createElement(p.Provider,{value:n},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),l=d(t),u=r,h=l["".concat(p,".").concat(u)]||l[u]||m[u]||o;return t?a.createElement(h,i(i({ref:n},s),{},{components:t})):a.createElement(h,i({ref:n},s))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c[l]="string"==typeof e?e:r,i[1]=c;for(var d=2;d<o;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},69028:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var a=t(87462),r=(t(67294),t(3905));const o={sidebar_position:10},i="Document/ Encoder / Schema - superduperdb's mechanisms for specialized data.",c={unversionedId:"docs/document_encoder_abstraction",id:"docs/document_encoder_abstraction",title:"Document/ Encoder / Schema - superduperdb's mechanisms for specialized data.",description:"In AI, typical types of data are:",source:"@site/content/docs/10_document_encoder_abstraction.md",sourceDirName:"docs",slug:"/docs/document_encoder_abstraction",permalink:"/docs/docs/document_encoder_abstraction",draft:!1,editUrl:"https://github.com/SuperDuperDB/superduperdb/tree/main/docs/content/docs/10_document_encoder_abstraction.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"The component abstraction",permalink:"/docs/docs/component_abstraction"},next:{title:"Query API syntax and approach",permalink:"/docs/docs/supported_query_APIs"}},p={},d=[{value:"<code>Document</code>",id:"document",level:3},{value:"<code>Encoder</code>",id:"encoder",level:3},{value:"<code>Schema</code>",id:"schema",level:3}],s={toc:d},l="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(l,(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"document-encoder--schema---superduperdbs-mechanisms-for-specialized-data"},(0,r.kt)("inlineCode",{parentName:"h1"},"Document"),"/ ",(0,r.kt)("inlineCode",{parentName:"h1"},"Encoder")," / ",(0,r.kt)("inlineCode",{parentName:"h1"},"Schema")," - ",(0,r.kt)("inlineCode",{parentName:"h1"},"superduperdb"),"'s mechanisms for specialized data."),(0,r.kt)("p",null,"In AI, typical types of data are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Numbers")," (integers, floats, etc.)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Text")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Images")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Audio")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Videos")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"...highly bespoke in house data"))),(0,r.kt)("p",null,"Most databases don't support any data other than numbers and text.\nSuperDuperDB enables the use of these more interesting data-types using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Document")," wrapper."),(0,r.kt)("h3",{id:"document"},(0,r.kt)("inlineCode",{parentName:"h3"},"Document")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Document")," wrapper, wraps dictionaries, and is the container which is used whenever\ndata is exchanged with your database. That means inputs, and queries, wrap dictionaries\nused with ",(0,r.kt)("inlineCode",{parentName:"p"},"Document")," and also results are returned wrapped with ",(0,r.kt)("inlineCode",{parentName:"p"},"Document"),"."),(0,r.kt)("p",null,"Whenever the ",(0,r.kt)("inlineCode",{parentName:"p"},"Document")," contains data which is in need of specialized serialization,\nthen the ",(0,r.kt)("inlineCode",{parentName:"p"},"Document")," instance contains calls to ",(0,r.kt)("inlineCode",{parentName:"p"},"Encoder")," instances."),(0,r.kt)("h3",{id:"encoder"},(0,r.kt)("inlineCode",{parentName:"h3"},"Encoder")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Encoder")," class, allows users to create and encoder custom datatypes, by providing\ntheir own serializers."),(0,r.kt)("p",null,"Here is an example of applying an ",(0,r.kt)("inlineCode",{parentName:"p"},"Encoder")," to add an image to a ",(0,r.kt)("inlineCode",{parentName:"p"},"Document"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import pickle\nimport PIL.Image\nfrom superduperdb import Encoder, Document\n\nimage = PIL.Image.open('my_image.jpg')\n\nmy_image_encoder = Encoder(\n    identifier='my-pil',\n    encoder=lambda x: pickle.dumps(x),\n    decoder=lambda x: pickle.loads(x),\n)\n\ndocument = Document({'img': my_image_encoder(image)})\n")),(0,r.kt)("p",null,"The bare-bones dictionary may be exposed with ",(0,r.kt)("inlineCode",{parentName:"p"},".unpack()"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> document.unpack()\n{'img': <PIL.PngImagePlugin.PngImageFile image mode=P size=400x300>}\n")),(0,r.kt)("h3",{id:"schema"},(0,r.kt)("inlineCode",{parentName:"h3"},"Schema")),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"Schema")," allows developers to connect named fields of dictionaries\nor columns of ",(0,r.kt)("inlineCode",{parentName:"p"},"pandas.DataFrame")," objects with ",(0,r.kt)("inlineCode",{parentName:"p"},"Encoders"),"."),(0,r.kt)("p",null,"Here is an example ",(0,r.kt)("inlineCode",{parentName:"p"},"Schema"),", which is used together with text and image\nfields:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"s = Schema('my-schema', fields={'my-text': 'str', 'my-image': my_image_encoder})\n")))}m.isMDXComponent=!0}}]);