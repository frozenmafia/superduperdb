"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[6474],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=o,y=d["".concat(i,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(y,c(c({ref:t},p),{},{components:n})):r.createElement(y,c({ref:t},p))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[d]="string"==typeof e?e:o,c[1]=l;for(var s=2;s<a;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85302:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(87462),o=(n(67294),n(3905));const a={sidebar_position:12},c="MongoDB Query API",l={unversionedId:"docs/mongodb_query_API",id:"docs/mongodb_query_API",title:"MongoDB Query API",description:"In general the MongoDB query API works exactly as pymongo, with the exception that:",source:"@site/content/docs/12_mongodb_query_API.md",sourceDirName:"docs",slug:"/docs/mongodb_query_API",permalink:"/docs/docs/mongodb_query_API",draft:!1,editUrl:"https://github.com/SuperDuperDB/superduperdb/tree/main/docs/content/docs/12_mongodb_query_API.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12},sidebar:"tutorialSidebar",previous:{title:"Query API syntax and approach",permalink:"/docs/docs/supported_query_APIs"},next:{title:"SQL Query API",permalink:"/docs/docs/sql_query_API"}},i={},s=[{value:"Inserts",id:"inserts",level:2},{value:"Updates",id:"updates",level:2},{value:"Selects",id:"selects",level:2},{value:"Vector-search",id:"vector-search",level:3},{value:"Deletes",id:"deletes",level:2},{value:"Aggregate",id:"aggregate",level:2}],p={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"mongodb-query-api"},"MongoDB Query API"),(0,o.kt)("p",null,"In general the MongoDB query API works exactly as ",(0,o.kt)("inlineCode",{parentName:"p"},"pymongo"),", with the exception that:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"inputs are wrapped in ",(0,o.kt)("inlineCode",{parentName:"li"},"Document")),(0,o.kt)("li",{parentName:"ul"},"additional support for vector-search is provided")),(0,o.kt)("h2",{id:"inserts"},"Inserts"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.backends.mongodb import Collection\n\ncollection = Collection('my-collection-name')\n\ndb.execute(\n    collection.insert_many([\n        Document({'my-field': ..., ...})\n        for _ in range(20)\n    ])\n)\n")),(0,o.kt)("h2",{id:"updates"},"Updates"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"db.execute(\n    collection.update_many(\n        {'<my>': '<filter>'},\n        Document({'$set': ...})\n    )\n)\n")),(0,o.kt)("h2",{id:"selects"},"Selects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"db.execute(\n    collection.find({}, {'_id': 1}).limit(10)\n)\n")),(0,o.kt)("h3",{id:"vector-search"},"Vector-search"),(0,o.kt)("p",null,"Vector-searches are a subset of standard select statements.\nThey may be integrated with ",(0,o.kt)("inlineCode",{parentName:"p"},".find"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb import Document\ndb.execute(\n    collection.like(Document({'img': <my_image>}), vector_index='my-index-name').find({}, {'img': 1})\n)\n")),(0,o.kt)("p",null,"Read more about vector-search ",(0,o.kt)("a",{parentName:"p",href:"/docs/docs/vector_search"},"here"),"."),(0,o.kt)("h2",{id:"deletes"},"Deletes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"db.execute(collection.delete_many({}))\n")),(0,o.kt)("h2",{id:"aggregate"},"Aggregate"),(0,o.kt)("p",null,"Aggregates are exactly as in ",(0,o.kt)("inlineCode",{parentName:"p"},"pymongo"),", with the exception that a ",(0,o.kt)("inlineCode",{parentName:"p"},"$vectorSearch")," stage may be\nfed with an additional field ",(0,o.kt)("inlineCode",{parentName:"p"},"'like': Document({...})"),", which plays the same role as in selects."),(0,o.kt)("p",null,"Read more about this in ",(0,o.kt)("a",{parentName:"p",href:"/docs/docs/vector_search"},"the vector-search section"),"."))}u.isMDXComponent=!0}}]);