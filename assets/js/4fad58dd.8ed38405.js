"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[3767],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=p(n),u=o,f=d["".concat(s,".").concat(u)]||d[u]||m[u]||i;return n?r.createElement(f,a(a({ref:t},l),{},{components:n})):r.createElement(f,a({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[d]="string"==typeof e?e:o,a[1]=c;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},62985:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const i={sidebar_position:28},a="Creating complex stacks of functionality",c={unversionedId:"docs/creating_stacks_of_functionality",id:"docs/creating_stacks_of_functionality",title:"Creating complex stacks of functionality",description:"With the declarative API, it's possible to create multiple",source:"@site/content/docs/28_creating_stacks_of_functionality.md",sourceDirName:"docs",slug:"/docs/creating_stacks_of_functionality",permalink:"/docs/docs/creating_stacks_of_functionality",draft:!1,editUrl:"https://github.com/SuperDuperDB/superduperdb/tree/main/docs/content/docs/28_creating_stacks_of_functionality.md",tags:[],version:"current",sidebarPosition:28,frontMatter:{sidebar_position:28},sidebar:"tutorialSidebar",previous:{title:"Serializing components with SuperDuperDB",permalink:"/docs/docs/serialization"},next:{title:"Developer vs. production mode",permalink:"/docs/docs/developer_vs_production_mode"}},s={},p=[],l={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"creating-complex-stacks-of-functionality"},"Creating complex stacks of functionality"),(0,o.kt)("p",null,"With the declarative API, it's possible to create multiple\ncomponents, models and workflows with a single declaration\nof the outcome."),(0,o.kt)("p",null,"Here is an example in which vectors are prepared using a\nconvolutional neural network over images,\nand these vectors are used downstream in ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"both")),"\nvector-search and in a transfer-learning task."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Listener")," instance, wraps the CNN ",(0,o.kt)("inlineCode",{parentName:"p"},"'my-cnn-vectorizer'"),",\nwhich contains the ",(0,o.kt)("inlineCode",{parentName:"p"},"torch")," layer and pre-processing/ post-processing.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Stack")," reuses this ",(0,o.kt)("inlineCode",{parentName:"p"},"Listener")," twice, once in the ",(0,o.kt)("inlineCode",{parentName:"p"},"VectorIndex"),",\nwhich may be used to find images, using images,\nand once with the support-vector-machine ",(0,o.kt)("inlineCode",{parentName:"p"},"SVC()"),", which ingests\nthe vectors calculated by the ",(0,o.kt)("inlineCode",{parentName:"p"},"Listener"),", and, is fitted\nbased on those vectors and the label set."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn.svm import SVC\nfrom my_models.vision import MyTorchModule, prepare_image\n\nfrom superduperdb.ext.numpy import array\nfrom superduperdb.ext.sklearn import Estimator\nfrom superduperdb.ext.torch import TorchModel\nfrom superduperdb import Stack, VectorIndex, Listener\nfrom superduperdb.backends.mongodb import Collection\n\ncollection = Collection('images')\n\nmy_listener=Listener(\n    'my-listener',\n    model=TorchModel(\n        'my-cnn-vectorizer',\n        object=MyTorchModule(),\n        preprocess=prepare_image,\n        postprocess=lambda x: x.numpy(),\n        encoder=array(dtype='float', shape=(512,))\n    )\n    key='img',\n    select=collection.find({'_fold': 'train'})\n)\n\ndb.add(\n    Stack(\n        'my-stack',\n        [\n            my_listener,\n            VectorIndex(\n                'my-index',\n                indexing_listener=my_listener,\n            ),\n            Estimator(\n                'my-classifier',\n                object=SVC()\n                postprocess=lambda x: ['apples', 'pears'][x]\n                train_select=my_listener.outputs,\n                train_X='img',\n                train_y='labels',\n            )\n        ],\n    )\n)\n")))}m.isMDXComponent=!0}}]);