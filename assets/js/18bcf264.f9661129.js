"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[8052],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=r.createContext({}),s=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(d.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=i,f=c["".concat(d,".").concat(m)]||c[m]||u[m]||a;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},41048:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(87462),i=(n(67294),n(3905));const a={sidebar_position:22},o="Daemonizing .predict with listeners",l={unversionedId:"docs/daemonizing_models_with_listeners",id:"docs/daemonizing_models_with_listeners",title:"Daemonizing .predict with listeners",description:"In many AI applications, it's important that a catalogue of predictions is maintained for",source:"@site/content/docs/22_daemonizing_models_with_listeners.md",sourceDirName:"docs",slug:"/docs/daemonizing_models_with_listeners",permalink:"/docs/docs/daemonizing_models_with_listeners",draft:!1,editUrl:"https://github.com/SuperDuperDB/superduperdb/tree/main/docs/content/docs/22_daemonizing_models_with_listeners.md",tags:[],version:"current",sidebarPosition:22,frontMatter:{sidebar_position:22},sidebar:"tutorialSidebar",previous:{title:"Applying models and predictors to data",permalink:"/docs/docs/apply_models"},next:{title:"Training models directly on your datastore",permalink:"/docs/docs/training_models"}},d={},s=[{value:"Creating listeners in-line with <code>.predict</code>",id:"creating-listeners-in-line-with-predict",level:2},{value:"Procedural API",id:"procedural-api",level:3},{value:"Declarative API",id:"declarative-api",level:3},{value:"Explanation",id:"explanation",level:2}],p={toc:s},c="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"daemonizing-predict-with-listeners"},"Daemonizing ",(0,i.kt)("inlineCode",{parentName:"h1"},".predict")," with listeners"),(0,i.kt)("p",null,"In many AI applications, it's important that a catalogue of predictions is maintained for\nall data in the database, or even all changed data."),(0,i.kt)("p",null,"In order to allow developers to implement this functionality, ",(0,i.kt)("inlineCode",{parentName:"p"},"superduperdb")," offers\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"Listener")," abstraction:"),(0,i.kt)("h2",{id:"creating-listeners-in-line-with-predict"},"Creating listeners in-line with ",(0,i.kt)("inlineCode",{parentName:"h2"},".predict")),(0,i.kt)("h3",{id:"procedural-api"},"Procedural API"),(0,i.kt)("p",null,"To create a ",(0,i.kt)("inlineCode",{parentName:"p"},"Listener"),", when applying a ",(0,i.kt)("inlineCode",{parentName:"p"},"Predictor")," instance to ",(0,i.kt)("inlineCode",{parentName:"p"},"db"),", the following\nprocedural pattern applies:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"my_model.predict(\n    X='<input-field>',\n    db=db,\n    select=query,\n    listen=True,\n)\n")),(0,i.kt)("h3",{id:"declarative-api"},"Declarative API"),(0,i.kt)("p",null,"This is equivalent to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"db.add(\n    Listener(\n        model=my_model,\n        key='my-key',\n        select=<query>,\n        predict_kwargs={**<model_dot_predict_kwargs>},\n    )\n)\n")),(0,i.kt)("h2",{id:"explanation"},"Explanation"),(0,i.kt)("p",null,"If a ",(0,i.kt)("inlineCode",{parentName:"p"},"Listener")," has been created, whenever new data is added to ",(0,i.kt)("inlineCode",{parentName:"p"},"db"),",\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"Predictor")," instance is loaded and predictions are evaluated on the inserted data."),(0,i.kt)("p",null,"If change-data-capture has been activated, this process applies, even if the data is inserted\nfrom a client other than ",(0,i.kt)("inlineCode",{parentName:"p"},"superduperdb"),"."))}u.isMDXComponent=!0}}]);