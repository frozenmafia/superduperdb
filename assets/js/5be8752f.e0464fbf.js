"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[2832],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=s(n),m=r,b=c["".concat(d,".").concat(m)]||c[m]||u[m]||o;return n?a.createElement(b,l(l({ref:t},p),{},{components:n})):a.createElement(b,l({ref:t},p))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(67294),r=n(86010);const o={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,l),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>_});var a=n(87462),r=n(67294),o=n(86010),l=n(12466),i=n(16550),d=n(91980),s=n(67392),p=n(50012);function c(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function u(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function b(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,d._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=u(e),[l,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[d,s]=b({queryString:n,groupId:a}),[c,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,p.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),y=(()=>{const e=d??c;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{y&&i(y)}),[y]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),s(e),h(e)}),[s,h,o]),tabValues:o}}var y=n(72389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function k(e){let{className:t,block:n,selectedValue:i,selectValue:d,tabValues:s}=e;const p=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.o5)(),u=e=>{const t=e.currentTarget,n=p.indexOf(t),a=s[n].value;a!==i&&(c(t),d(a))},m=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},s.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>p.push(e),onKeyDown:m,onClick:u},l,{className:(0,o.Z)("tabs__item",f.tabItem,l?.className,{"tabs__item--active":i===t})}),n??t)})))}function g(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function v(e){const t=h(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",f.tabList)},r.createElement(k,(0,a.Z)({},e,t)),r.createElement(g,(0,a.Z)({},e,t)))}function _(e){const t=(0,y.Z)();return r.createElement(v,(0,a.Z)({key:String(t)},e))}},97477:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>d,default:()=>b,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905)),o=n(74866),l=n(85162);const i={sidebar_position:21},d="Applying models and predictors to data",s={unversionedId:"docs/apply_models",id:"docs/apply_models",title:"Applying models and predictors to data",description:"Model and Predictor instances may be applied directly to data in the database without first fetching the data client-side.",source:"@site/content/docs/21_apply_models.mdx",sourceDirName:"docs",slug:"/docs/apply_models",permalink:"/docs/docs/apply_models",draft:!1,editUrl:"https://github.com/SuperDuperDB/superduperdb/tree/main/docs/content/docs/21_apply_models.mdx",tags:[],version:"current",sidebarPosition:21,frontMatter:{sidebar_position:21},sidebar:"tutorialSidebar",previous:{title:"Procedural vs. declarative API",permalink:"/docs/docs/procedural_vs_declarative_api"},next:{title:"Daemonizing .predict with listeners",permalink:"/docs/docs/daemonizing_models_with_listeners"}},p={},c=[{value:"Procedural API",id:"procedural-api",level:2},{value:"Out-of-database prediction",id:"out-of-database-prediction",level:3},{value:"In-database, one-time model prediction",id:"in-database-one-time-model-prediction",level:3},{value:"In database, daemonized model predictions with <code>listen=True</code>",id:"in-database-daemonized-model-predictions-with-listentrue",level:3},{value:"Activating models for vector-search with <code>create_vector_index=True</code>",id:"activating-models-for-vector-search-with-create_vector_indextrue",level:3},{value:"Predictions by framework",id:"predictions-by-framework",level:2},{value:"Predicting based on the <code>identifier</code> via the <code>Datalayer</code>",id:"predicting-based-on-the-identifier-via-the-datalayer",level:2},{value:"Models with special outputs",id:"models-with-special-outputs",level:2}],u={toc:c},m="wrapper";function b(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"applying-models-and-predictors-to-data"},"Applying models and predictors to data"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Model")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Predictor")," instances may be applied directly to data in the database without first fetching the data client-side."),(0,r.kt)("h2",{id:"procedural-api"},"Procedural API"),(0,r.kt)("p",null,"Applying a model to data, is straightforward with ",(0,r.kt)("inlineCode",{parentName:"p"},"Model.predict"),":"),(0,r.kt)("h3",{id:"out-of-database-prediction"},"Out-of-database prediction"),(0,r.kt)("p",null,"As is standard in ",(0,r.kt)("inlineCode",{parentName:"p"},"sklearn")," and other AI libraries and frameworks, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"tensorflow.keras"),",\nall ",(0,r.kt)("inlineCode",{parentName:"p"},"superduperdb")," models, support ",(0,r.kt)("inlineCode",{parentName:"p"},".predict"),", predicting directly on datapoints:"),(0,r.kt)("p",null,"To use this functionality, supply the datapoint directly to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Model"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"my_model = ...  # code to instantiate model\n\nmy_model.predict(X=[<input_datum> for _ in range(num_data_points)])\n")),(0,r.kt)("p",null,"If only a single prediction is desired, then:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"my_model.predict(X=<input_datum>, one=True)\n")),(0,r.kt)("h3",{id:"in-database-one-time-model-prediction"},"In-database, one-time model prediction"),(0,r.kt)("p",null,"It is possible to apply a model directly to the database with ",(0,r.kt)("inlineCode",{parentName:"p"},"Model.predict"),".\nThe parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"X")," refers to the field/column of data which is passed to the model.\n",(0,r.kt)("inlineCode",{parentName:"p"},'X="_base"')," passes all of the data (all columns/ fields)."),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"mongodb",label:"MongoDB",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"my_model = ...  # code to instantiate model\n\nmy_model.predict(\n    X='<input-field>',\n    db=db,\n    select=Collection('<my-collection>').find(),\n)\n"))),(0,r.kt)(l.Z,{value:"sql",label:"SQL",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"table = db.load('my-table', 'table_or_collection')\n\nmy_model = ...  # code to instantiate model\n\nmy_model.predict(\n    X='myfield',\n    db=db,\n    select=table.filter(table.brand == 'Nike').select(table.myfield),\n)\n")))),(0,r.kt)("h3",{id:"in-database-daemonized-model-predictions-with-listentrue"},"In database, daemonized model predictions with ",(0,r.kt)("inlineCode",{parentName:"h3"},"listen=True")),(0,r.kt)("p",null,"If is also possible to apply a model to create predictions, and also\nrefresh these predictions, whenever new data comes in:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"my_model.predict(\n    X='<input-field>',\n    db=db,\n    select=query,\n    listen=True,\n)\n")),(0,r.kt)("p",null,"Under-the-hood, this call creates a ",(0,r.kt)("inlineCode",{parentName:"p"},"Listener")," which is deployed on\nthe query passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},".predict")," call."),(0,r.kt)("p",null,"Read more about the ",(0,r.kt)("inlineCode",{parentName:"p"},"Listener")," abstraction ",(0,r.kt)("a",{parentName:"p",href:"/docs/docs/daemonizing_models_with_listeners"},"here")),(0,r.kt)("h3",{id:"activating-models-for-vector-search-with-create_vector_indextrue"},"Activating models for vector-search with ",(0,r.kt)("inlineCode",{parentName:"h3"},"create_vector_index=True")),(0,r.kt)("p",null,"If a model outputs vectors, it is possible to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"VectorIndex"),"\nin SuperDuperDB, inline, during applying a model:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"my_model.predict(\n    X='<input-field>',\n    db=db,\n    select=query,\n    create_vector_index=True,\n)\n")),(0,r.kt)("h2",{id:"predictions-by-framework"},"Predictions by framework"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"vanilla",label:"Vanilla",mdxType:"TabItem"},(0,r.kt)("p",null,"By default, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Model")," component supports arbitrary callables to be used to\nperform model predictions and transformations:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb import Model\n\ndef chunk_text(x):\n    return x.split('\\n\\n')\n\nm = Model('my-chunker', object=chunk_text)\n\nm.predict(\n    X='<input>',\n    select=<query>,   # MongoDB, Ibis or SQL query\n    db=db,\n)\n"))),(0,r.kt)(l.Z,{value:"scikit-learn",label:"Scikit-Learn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.ext.sklearn import Estimator\nfrom sklearn.svm import SVC\n\nm = Estimator(SVC())\n\nm.predict(\n    X='<input>',\n    select=<query>,  # MongoDB, Ibis or SQL query\n    db=db,\n)\n"))),(0,r.kt)(l.Z,{value:"transformers",label:"Transformers",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.ext.transformers import Pipeline\nfrom superduperdb import superduper\n\nm = Pipeline(task='sentiment-analysis')\n\nm.predict(\n    X='<input>',\n    db=db,\n    select=<query>,  # MongoDB, Ibis or SQL query\n    batch_size=100,  # any **kwargs supported by `transformers.Pipeline.__call__`\n)\n"))),(0,r.kt)(l.Z,{value:"pytorch",label:"PyTorch",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import torch\nfrom superduperdb.ext.torch import Module\n\nmodel = Module(\n    'my-classifier',\n    preprocess=lambda x: torch.tensor(x),\n    object=torch.nn.Linear(64, 512),\n    postprocess=lambda x: x.topk(1)[0].item(),\n)\n\nmodel.predict(\n    X='<input>',\n    db=db,\n    select=<query>,  # MongoDB, Ibis or SQL query\n    batch_size=100,  # any **kwargs supported by `torch.utils.data.DataLoader`\n    num_workers=4,\n)\n"))),(0,r.kt)(l.Z,{value:"openai",label:"OpenAI",mdxType:"TabItem"},(0,r.kt)("p",null,"Embeddings:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.ext.openai import OpenAIEmbedding\n\nm = OpenAIEmbedding(identifier='text-embedding-ada-002')\n\nm.predict(\n    X='<input>',\n    db=db,\n    select=<query>,  # MongoDB, Ibis or SQL query\n)\n")))),(0,r.kt)("h2",{id:"predicting-based-on-the-identifier-via-the-datalayer"},"Predicting based on the ",(0,r.kt)("inlineCode",{parentName:"h2"},"identifier")," via the ",(0,r.kt)("inlineCode",{parentName:"h2"},"Datalayer")),(0,r.kt)("p",null,"Instead of calling the model directly, it's also possible to\npredict on single data points using ",(0,r.kt)("inlineCode",{parentName:"p"},"db.predict"),"."),(0,r.kt)("p",null,"I.e. the following are equivalent:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"my_model = Model('my-model', model_object) # code to instantiate model\n\nmy_model.predict(X=<input_datum>)\n")),(0,r.kt)("p",null,"... and"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"my_model = Model('my-model', model_object) # code to instantiate model\n\ndb.add(my_model)\ndb.predict('my-model', input=<input_datum>)\n")),(0,r.kt)("p",null,"Using ",(0,r.kt)("inlineCode",{parentName:"p"},"db.predict"),", model predictions may be augmented with data from the database.\nI.e. the following are equivalent:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"db.predict('my-model, input=<input_data>, context_select=<query>)\n")),(0,r.kt)("p",null,"... and"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"context = db.execute(query)\nmy_model.predict(<input_data>, context=context)\n")),(0,r.kt)("h2",{id:"models-with-special-outputs"},"Models with special outputs"),(0,r.kt)("p",null,"If a model has outputs which aren't directly compatible with the underlying database, then one adds either\nan ",(0,r.kt)("inlineCode",{parentName:"p"},"Encoder")," or a ",(0,r.kt)("inlineCode",{parentName:"p"},"Schema")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Model")," at initialization."),(0,r.kt)("p",null,"Here's a model which outputs images:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.ext.pillow import pil_image\n\nmy_model = Model('my-model', model_object, encoder=pil_image)\n")),(0,r.kt)("p",null,"Here's a model which outputs dictionaries with ",(0,r.kt)("inlineCode",{parentName:"p"},'"img"')," (images) and ",(0,r.kt)("inlineCode",{parentName:"p"},'"txt"')," (string) fields:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb import Schema\n\nschema = Schema('my-schema', fields={'img': pil_image, 'txt': 'str'})\nmy_model = Model('my-model', model_object, schema=schema)\n")))}b.isMDXComponent=!0}}]);